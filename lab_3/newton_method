import numpy as np
from scipy.misc import derivative
def f(x):
    return 3 * pow(x, 4) - 4 * pow(x, 3) + 2 * pow(x, 2) - 4 * x - 1
found_segments = [(-0.3, -0.2), (1.5, 1.6)]
epsilon = 0.0001
def newton_method(f, a, b, epsilon):
    while True:
        second_derivative = derivative(f, b, n=2)
        if second_derivative == 0:
            return None
        if f(b) * second_derivative > 0:
            x_n = b
        else:
            x_n = a
        first_derivative = derivative(f, x_n, n=1)
        x_n_1 = x_n - f(x_n) / first_derivative
        if abs(x_n_1 - x_n) < epsilon:
            return x_n_1
        b = x_n_1  # Оновлюємо значення b
for a, b in found_segments:
    print(f"На відрізку: [{a}, {b}] є такі розв'язки: ")
    if f(a) * f(b) < 0:
        root_newton = newton_method(f, a, b, epsilon)
        if root_newton is not None:
            print('Метод Ньютона:', round(root_newton, 5))
        else:
            print('Метод Ньютона не знайшов кореня.')
    else:
        print('На цьому відрізку корені відсутні')

import numpy as np
from scipy.misc import derivative

def f(x):
    return 3 * pow(x,4) - 4 * pow(x,3) + 2 * pow(x,2) - 4 * x - 1

eps = 0.0001
found_segments = [(-0.3,-0.2),(1.5,1.6)]

def newton_method(f, a, b, eps): 
    second_derivative = derivative(f, b, n=2)
    if f(b) * second_derivative > 0:
        x_n = b
    else:
        x_n = a
    first_derivative = derivative(f, b, n=1)
    x_n_1 = x_n - f(x_n) / first_derivative
    while abs(x_n_1 - x_n) > eps:
        x_n = x_n_1
        x_n_1 = x_n - f(x_n) / first_derivative
    return x_n_1

for a, b in found_segments:
    print(f"На відрізку: [{a}, {b}] є такі розв'язки: ")
    if f(a) * f(b) < 0:
        root_newton = newton_method(f,a, b, eps)
        if a <= root_newton <= b:
            print('Метод Ньютона:', round(root_newton, 5))
    else:
        print('На цьому відрізку корені відсутні')

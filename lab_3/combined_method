import numpy as np
from scipy.misc import derivative
def f(x):
    return 3 * pow(x, 4) - 4 * pow(x, 3) + 2 * pow(x, 2) - 4 * x - 1
def combined_newton_chord_method(f, a, b, eps):
    if derivative(f, a, dx=eps) * derivative(f, a, n=2) > 0:
        a0 = a
        b0 = b
    else:
        a0 = b
        b0 = a
    a_n = a0
    b_n = b0
    while True:
        a_n_1 = a_n - f(a_n) * (b_n - a_n) / (f(b_n) - f(a_n))
        b_n_1 = b_n - f(b_n) /derivative(f, b_n, n=1)
        if abs(a_n_1 - b_n_1) < eps:
            return a_n_1
        a_n = a_n_1
        b_n = b_n_1
eps = 0.0001
found_segments = [(-0.3, -0.2), (1.5, 1.6)]
for a, b in found_segments:
    print(f"На відрізку [{a}, {b}] є такі розв'язки: ")
    if f(a) * f(b) < 0:
        root_combined = combined_newton_chord_method(f, a, b, eps)
        if a <= root_combined <= b:
            print('Комбінований метод:', round(root_combined, 5))
    else:
        print('На цьому відрізку корені відсутні')
